/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package www.ascox.in;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import static www.ascox.in.QueryProcess.canyin;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfRect;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.highgui.Highgui;
import org.opencv.objdetect.CascadeClassifier;

/**
 *
 * @author azure
 */
public class InsertImage extends javax.swing.JInternalFrame {

    public static String absPath;
    public static  String absPath1 ;
    public String abscropPath = null;
      static BufferedImage canyin = null;
   // public static String absPath = null;
public static InputStream in1,in2;    
 public static BufferedImage originalImage ;
 public static BufferedImage originalImage1;
 public static String filename ;
public static String filename1 ;
    /**
     * Creates new form InsertImageIFrame
     */
    public InsertImage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel3 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setTitle("Insert Image into Database");
        setOpaque(true);
        setVisible(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Leaf Disease Image :");
        jLabel4.setPreferredSize(new java.awt.Dimension(67, 23));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 90, 130, -1));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Leaf Image :");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-20, 130, 120, 30));

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 90, 200, 30));

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 200, 30));

        jButton1.setText("Browse");
        jButton1.setPreferredSize(new java.awt.Dimension(67, 30));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 90, 90, -1));

        jButton4.setText("Browse");
        jButton4.setPreferredSize(new java.awt.Dimension(67, 30));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 130, 90, -1));

        jButton2.setText("Submit");
        jButton2.setMaximumSize(new java.awt.Dimension(64, 23));
        jButton2.setMinimumSize(new java.awt.Dimension(64, 23));
        jButton2.setPreferredSize(new java.awt.Dimension(64, 23));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 230, 100, 30));

        jButton3.setText("Reset");
        jButton3.setMaximumSize(new java.awt.Dimension(64, 23));
        jButton3.setMinimumSize(new java.awt.Dimension(64, 23));
        jButton3.setPreferredSize(new java.awt.Dimension(64, 23));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 230, 90, 30));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Leaf Image"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setViewportView(jLabel2);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, 290, 370));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Leaf Disease Image"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setViewportView(jLabel3);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 10, 280, 370));

        jButton5.setText("Image Process");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 130, -1, 30));

        jButton6.setText("Image Process");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 90, -1, 30));

        jLabel5.setText("Disease Name      :");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 184, 100, 20));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 180, 200, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed

    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & GIF IMAGES", "jpg", "png");
        fileChooser.addChoosableFileFilter(filter);
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            
             filename = selectedFile.getName();
            jTextField3.setText(path);
            absPath = path;
            if (selectedFile != null) {
                try {

                     originalImage = ImageIO.read(selectedFile);

                    int width = originalImage.getWidth(null);
                    int hieght = originalImage.getHeight(null);

                    System.out.println("widt " + width + " h " + hieght);
                    jLabel2.setIcon(new ImageIcon(originalImage));
                    jLabel2.setLocation(width, hieght);
                    jScrollPane1.setViewportView(jLabel2);
                } catch (IOException ex) {
                    Logger.getLogger(InsertImage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        
        
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        System.out.println("\nRunning PatternDetector");

        CascadeClassifier faceDetector = new CascadeClassifier("D:/haarcascade_frontalface_alt.xml");
        Mat image = Highgui.imread(absPath);

        MatOfRect faceDetections = new MatOfRect();
        faceDetector.detectMultiScale(image, faceDetections);

        System.out.println(String.format("Detected %s Leaf", faceDetections.toArray().length));
        
       

        for (Rect rect : faceDetections.toArray()) {
            Core.rectangle(image, new Point(rect.x, rect.y), new Point(rect.x + rect.width, rect.y + rect.height),
                    new Scalar(0, 255, 0));
            
            
        }

      
    Highgui.imwrite("images//"+filename+".jpg", image);
     
        
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        JFileChooser fileChooser1 = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & GIF IMAGES", "jpg", "png");
        fileChooser1.addChoosableFileFilter(filter);
        int returnValue = fileChooser1.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser1.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            jTextField4.setText(path);
            absPath1 = path;
            if (selectedFile != null) {
                try {

                     originalImage1 = ImageIO.read(selectedFile);

                    int width = originalImage1.getWidth(null);
                    int hieght = originalImage1.getHeight(null);

                   // System.out.println("widt " + width + " h " + hieght);
                    jLabel3.setIcon(new ImageIcon(originalImage1));
                    jLabel3.setLocation(width, hieght);
                    jScrollPane2.setViewportView(jLabel3);
                } catch (IOException ex) {
                    Logger.getLogger(InsertImage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        System.out.println("\nRunning PatternDetector");

        CascadeClassifier faceDetector = new CascadeClassifier("D:/haarcascade_frontalface_alt.xml");
        Mat image = Highgui.imread(absPath1);

        MatOfRect faceDetections = new MatOfRect();
        faceDetector.detectMultiScale(image, faceDetections);

        System.out.println(String.format("Detected %s Leaf", faceDetections.toArray().length));
        
       

        for (Rect rect : faceDetections.toArray()) {
            Core.rectangle(image, new Point(rect.x, rect.y), new Point(rect.x + rect.width, rect.y + rect.height),
                    new Scalar(0, 255, 0));
        }

      
    Highgui.imwrite("images//"+filename1+".jpg", image);
     
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        
      ImageCropper imagecropper = new ImageCropper();
        try {
            abscropPath = imagecropper.cropLocation(absPath);
        } catch (Exception ex) {
            Logger.getLogger(InsertImage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        insertImage();
        try {
            insertImageDistinct();
        } catch (IOException ex) {
            Logger.getLogger(InsertImage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(InsertImage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        clear();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
      
        QueryProcess query = new QueryProcess();
        getDesktopPane().add(query);
        query.setVisible(true);
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        
        QueryProcess1 query1 = new QueryProcess1();
        getDesktopPane().add(query1);
        query1.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

   
    public void insertImage() {
        try {

            String type = jTextField1.getText();

            String driverName = "com.mysql.jdbc.Driver";
            String url = "jdbc:mysql://localhost:3306/";
            String dbName = "image";
            String userName = "root";
            String password = "root";
            Connection con = null;
            Class.forName(driverName);
            con = DriverManager.getConnection(url + dbName, userName, password);
            
            
           
            
            PreparedStatement pre = con.prepareStatement("insert into crop(leafdisese, leaf,type) " + "values(?,?,?)");

            File fl = new File(absPath1);
            FileInputStream fis1 = new FileInputStream(fl);
            File f2 = new File(abscropPath);
            FileInputStream fis2 = new FileInputStream(f2);

            // pre.setString(4, "123456");
            pre.setBinaryStream(1, fis1);
            pre.setBinaryStream(2, fis2);
             pre.setString(3, type);
            pre.executeUpdate();
            //System.out.println(uname + uid + mgen);
           
//System.out.println("Successfully inserted the file into the database!");
               JOptionPane.showMessageDialog(null, "Successfully inserted the file into the database!");
            pre.close();
            con.close();

        } catch (Exception e1) {
             
            System.out.println(e1.getMessage());
            JOptionPane.showMessageDialog(null,e1.getMessage() );
        }
        
        
        
        
    }

    public void clear() {

        jTextField3.setText(null);
        jTextField4.setText(null);
        jLabel2.setIcon(null);
        jLabel3.setIcon(null);

    }

    private void insertImageDistinct() throws IOException, SQLException {
      
        
        int checkNumber = 0;
        
         File compare1 = new File(abscropPath);
         BufferedImage bufferedCompare1 = ImageIO.read(compare1);
         
         
         try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            e.printStackTrace();
        }
        Connection con = null;
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/image", "root", "root");
        } catch (SQLException ex) {
            Logger.getLogger(TestingImageProcess.class.getName()).log(Level.SEVERE, null, ex);
        }
        Statement s = null;
        try {
            s = con.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(TestingImageProcess.class.getName()).log(Level.SEVERE, null, ex);
        }

        ResultSet rs = null;
        try {
            rs = s.executeQuery( "SELECT * FROM leafcrop");
        } catch (SQLException ex) {
            Logger.getLogger(TestingImageProcess.class.getName()).log(Level.SEVERE, null, ex);
        }

        byte buff[] = new byte[1024];
         
        
         while (rs.next()) {
                
                Blob bblob = rs.getBlob(3);

                File bfile = new File("images\\retrivedcrop.jpg");

                InputStream is = bblob.getBinaryStream();
                
                
                FileOutputStream fos = null;
                try {
                    fos = new FileOutputStream(bfile);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(TestingImageProcess.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    for (int b = is.read(buff); b != -1; b = is.read(buff)) {
                        fos.write(buff, 0, b);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(TestingImageProcess.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                File retrivedCrop = new File("images\\retrivedcrop.jpg");
                BufferedImage bufferedretrivedCrop = ImageIO.read(retrivedCrop);
                
                float x = fileCaompare(bufferedCompare1, bufferedretrivedCrop);
                
                if(x == 100){
                    checkNumber++;
                }
           
         }
        
         
         if(checkNumber == 0){
         
            try {
 String type = jTextField1.getText();
            String gender = null;

            String driverName = "com.mysql.jdbc.Driver";
            String url = "jdbc:mysql://localhost:3306/";
            String dbName = "image";
            String userName = "root";
            String password = "root";
            Connection con1 = null;
            Class.forName(driverName);
            con1 = DriverManager.getConnection(url + dbName, userName, password);
            Statement st = con1.createStatement();

            PreparedStatement pre = con1.prepareStatement("insert into leafcrop(original, cimg,type) " + "values(?,?,?)");

            File fl = new File(absPath);
            FileInputStream fis1 = new FileInputStream(fl);
            File f2 = new File(abscropPath);
            FileInputStream fis2 = new FileInputStream(f2);

            // pre.setString(4, "123456");
            pre.setBinaryStream(1, fis1);
            pre.setBinaryStream(2, fis2);
            pre.setString(3, type);
            pre.executeUpdate();
            //System.out.println(uname + uid + mgen);
            //JOptionPane.showMessageDialog(null, "Successfully inserted the file into the database!");
//System.out.println("Successfully inserted the file into the database!");
            pre.close();
            con1.close();

        } catch (Exception e1) {
            //System.out.println(e1.getMessage());
            JOptionPane.showMessageDialog(null, e1.getMessage());
        }
       
        
         }
        
    }
    
    
    private static float fileCaompare(BufferedImage image, BufferedImage images) throws IOException {

        long start = System.currentTimeMillis();
        //File file= new File("C:\\13.jpg");
        //BufferedImage image = ImageIO.read(file);
        int width = image.getWidth(null);
        int height = image.getHeight(null);
        int[][] clr = new int[width][height];
//File files= new File("C:\\20.jpg");

        //BufferedImage images = ImageIO.read(files);
        int widthe = images.getWidth(null);
        int heighte = images.getHeight(null);
        int[][] clre = new int[widthe][heighte];
        int smw = 0;
        int smh = 0;
        int p = 0;
//CALUCLATING THE SMALLEST VALUE AMONG WIDTH AND HEIGHT
        if (width > widthe) {
            smw = widthe;
        } else {
            smw = width;
        }
        if (height > heighte) {
            smh = heighte;
        } else {
            smh = height;
        }
//CHECKING NUMBER OF PIXELS SIMILARITY
        for (int a = 0; a < smw; a++) {
            for (int b = 0; b < smh; b++) {
                clre[a][b] = images.getRGB(a, b);
                clr[a][b] = image.getRGB(a, b);
                if (clr[a][b] == clre[a][b]) {
                    p = p + 1;
                }
            }
        }

        float w, h = 0;
        if (width > widthe) {
            w = width;
        } else {
            w = widthe;
        }
        if (height > heighte) {
            h = height;
        } else {
            h = heighte;
        }
        float s = (smw * smh);

        float x = (100 * p) / s;

        // System.out.println("x value   " + x);
        return x;
    }

}
